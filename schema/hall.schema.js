import { body } from 'express-validator';

export const createHallSchema = [
    body('hall_number')
        .exists()
        .withMessage('Hall number is required')
        .isNumeric()
        .withMessage('Year of study must be numeric')
        .trim().escape()
        .withMessage('University is not valid'),
    body('hall_name')
        .exists()
        .withMessage('Hall name is required')
        .trim().escape()
        .withMessage('Hall name is not valid'),
    body('total_rooms')
        .exists()
        .withMessage('Rooms number is required')
        .isNumeric()
        .withMessage('Rooms number must be numeric')
        .trim().escape()
        .withMessage('Study type is not valid'),
    body('total_students')
        .exists()
        .withMessage('Students number is required')
        .isNumeric()
        .withMessage('Students number must be numeric')
        .trim().escape()
        .withMessage('Students number is not valid'),
    body('students_in_room')
        .exists()
        .withMessage('Students number inside room is required')
        .isNumeric()
        .withMessage('Students number inside room must be numeric')
        .trim().escape()
        .withMessage('Students number inside room is not valid'),
    body('min_grade')
        .exists()
        .withMessage('Minimum student grade is required')
        .isFloat()
        .withMessage('Minimum student grade must be numeric')
        .trim().escape()
        .withMessage('Minimum student grade is not valid'),
    body('max_grade')
        .exists()
        .withMessage('Maximum student grade is required')
        .isFloat()
        .withMessage('Maximum student grade must be numeric')
        .trim().escape()
        .withMessage('Maximum student grade is not valid'),
    body('facilities')
        .exists()
        .withMessage('Facilities are required')
        .trim().escape()
        .withMessage('Facilities are not valid'),
    body('bathroom')
        .exists()
        .withMessage('Bathroom description is required')
        .trim().escape()
        .withMessage('Bathroom description is not valid'),
    body('description')
        .exists()
        .withMessage('Description is required')
        .trim().escape()
        .withMessage('Description is not valid'),
     body('universities')
        .exists()
        .withMessage('Universities are required')
        .isArray()
        .withMessage('Universities must be of type array and contain only alphabetical characters')
        .trim().escape()
        .withMessage('Universities are not valid'),    
    body('hall_adress')
        .exists()
        .withMessage('Adress is required')
        .trim().escape()
        .withMessage('Adress is not valid'),
    body('hall_latitude')
        .exists()
        .withMessage('Hall latitude is required')
        .isFloat()
        .withMessage('Hall latitude must be numeric')
        .trim().escape()
        .withMessage('Hall latitude is not valid'),
    body('hall_longitude')
        .exists()
        .withMessage('Hall latitude is required')
        .isFloat()
        .withMessage('Hall latitude must be numeric')
        .trim().escape()
        .withMessage('Hall latitude is not valid'),
    body('contact_number')
        .exists()
        .withMessage('Phone Number is required')
        .isNumeric()
        .withMessage('Phone number must be numeric.')
        .isMobilePhone()
        .withMessage('This phone number is not valid, please try again.')
        .trim().escape(),
]

export const updateHallSchema = [
    body('total_rooms')
        .exists()
        .withMessage('Rooms number is required')
        .isNumeric()
        .withMessage('Rooms number must be numeric')
        .trim().escape()
        .withMessage('Study type is not valid'),
    body('total_students')
        .exists()
        .withMessage('Students number is required')
        .isNumeric()
        .withMessage('Students number must be numeric')
        .trim().escape()
        .withMessage('Students number is not valid'),
    body('students_in_room')
        .exists()
        .withMessage('Students number inside room is required')
        .isNumeric()
        .withMessage('Students number inside room must be numeric')
        .trim().escape()
        .withMessage('Students number inside room is not valid'),
    body('min_grade')
        .exists()
        .withMessage('Minimum student grade is required')
        .isFloat()
        .withMessage('Minimum student grade must be numeric')
        .trim().escape()
        .withMessage('Minimum student grade is not valid'),
    body('max_grade')
        .exists()
        .withMessage('Maximum student grade is required')
        .isFloat()
        .withMessage('Maximum student grade must be numeric')
        .trim().escape()
        .withMessage('Maximum student grade is not valid'),
    body('facilities')
        .exists()
        .withMessage('Facilities are required')
        .trim().escape()
        .withMessage('Facilities are not valid'),
     body('universities')
        .exists()
        .withMessage('Universities are required')
        .isArray()
        .withMessage('Universities must be of type array and contain only alphabetical characters')
        .trim().escape()
        .withMessage('Universities are not valid'),    
    body('bathroom')
        .exists()
        .withMessage('Bathroom choice is required')
        // .isAlphanumeric()
        // .withMessage('Bathroom choice must contain only alphabetical characters')    
        .trim().escape()
        .withMessage('Bathroom choice is not valid'),
    body('description')
        .exists()
        .withMessage('Description is required')
        // .isAlphanumeric()
        // .withMessage('Description cant contain special characters')    
        .trim().escape()
        .withMessage('Description is not valid'),
    body('hall_adress')
        .exists()
        .withMessage('Adress is required')
        .trim().escape()
        .withMessage('Adress is not valid'),
    body('hall_latitude')
        .exists()
        .withMessage('Hall latitude is required')
        .isFloat()
        .withMessage('Hall latitude must be numeric')
        .trim().escape()
        .withMessage('Hall latitude is not valid'),
    body('hall_longitude')
        .exists()
        .withMessage('Hall latitude is required')
        .isFloat()
        .withMessage('Hall latitude must be numeric')
        .trim().escape()
        .withMessage('Hall latitude is not valid'),
    body('contact_number')
        .exists()
        .withMessage('Phone Number is required')
        .isNumeric()
        .withMessage('Phone number must be numeric.')
        .isMobilePhone()
        .withMessage('This phone number is not valid, please try again.')
        .trim().escape(),
]
